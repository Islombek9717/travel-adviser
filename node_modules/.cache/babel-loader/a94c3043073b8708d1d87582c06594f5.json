{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Islombek\\\\Desktop\\\\apiProjects\\\\travel_advisor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CssBaseline, Grid } from \"@material-ui/core\";\nimport { getPlacesData, getWeatherData } from \"./api/travelAdvisorAPI\";\nimport Header from \"./components/Header/Header\";\nimport List from \"./components/List/List\";\nimport Map from \"./components/Map/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [type, setType] = useState(\"restaurants\");\n  const [rating, setRating] = useState(\"\");\n  const [coords, setCoords] = useState({});\n  const [bounds, setBounds] = useState(null);\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const [places, setPlaces] = useState([]);\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [childClicked, setChildClicked] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(_ref => {\n      let {\n        coords: {\n          latitude,\n          longitude\n        }\n      } = _ref;\n      setCoords({\n        lat: latitude,\n        lng: longitude\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const filtered = places.filter(place => Number(place.rating) > rating);\n    setFilteredPlaces(filtered);\n  }, [rating]);\n  useEffect(() => {\n    if (bounds) {\n      setIsLoading(true);\n      getWeatherData(coords.lat, coords.lng).then(data => setWeatherData(data));\n      getPlacesData(type, bounds.sw, bounds.ne).then(data => {\n        setPlaces(data.filter(place => place.name && place.num_reviews > 0));\n        setFilteredPlaces([]);\n        setRating(\"\");\n        setIsLoading(false);\n      });\n    }\n  }, [bounds, type]);\n\n  const onLoad = autoC => setAutocomplete(autoC);\n\n  const onPlaceChanged = () => {\n    const lat = autocomplete.getPlace().geometry.location.lat();\n    const lng = autocomplete.getPlace().geometry.location.lng();\n    setCoords({\n      lat,\n      lng\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      onPlaceChanged: onPlaceChanged,\n      onLoad: onLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      style: {\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          isLoading: isLoading,\n          childClicked: childClicked,\n          places: filteredPlaces.length ? filteredPlaces : places,\n          type: type,\n          setType: setType,\n          rating: rating,\n          setRating: setRating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Map, {\n          setChildClicked: setChildClicked,\n          setBounds: setBounds,\n          setCoords: setCoords,\n          coords: coords,\n          places: filteredPlaces.length ? filteredPlaces : places,\n          weatherData: weatherData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"SkJfcadLvrMyQyHUxmSIwMA3yQ0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Islombek/Desktop/apiProjects/travel_advisor/src/App.js"],"names":["React","useState","useEffect","CssBaseline","Grid","getPlacesData","getWeatherData","Header","List","Map","App","type","setType","rating","setRating","coords","setCoords","bounds","setBounds","weatherData","setWeatherData","filteredPlaces","setFilteredPlaces","places","setPlaces","autocomplete","setAutocomplete","childClicked","setChildClicked","isLoading","setIsLoading","navigator","geolocation","getCurrentPosition","latitude","longitude","lat","lng","filtered","filter","place","Number","then","data","sw","ne","name","num_reviews","onLoad","autoC","onPlaceChanged","getPlace","geometry","location","width","length","display","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { CssBaseline, Grid } from \"@material-ui/core\";\r\n\r\nimport { getPlacesData, getWeatherData } from \"./api/travelAdvisorAPI\";\r\nimport Header from \"./components/Header/Header\";\r\nimport List from \"./components/List/List\";\r\nimport Map from \"./components/Map/Map\";\r\n\r\nconst App = () => {\r\n  const [type, setType] = useState(\"restaurants\");\r\n  const [rating, setRating] = useState(\"\");\r\n\r\n  const [coords, setCoords] = useState({});\r\n  const [bounds, setBounds] = useState(null);\r\n\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\r\n  const [places, setPlaces] = useState([]);\r\n\r\n  const [autocomplete, setAutocomplete] = useState(null);\r\n  const [childClicked, setChildClicked] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      ({ coords: { latitude, longitude } }) => {\r\n        setCoords({ lat: latitude, lng: longitude });\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const filtered = places.filter((place) => Number(place.rating) > rating);\r\n\r\n    setFilteredPlaces(filtered);\r\n  }, [rating]);\r\n\r\n  useEffect(() => {\r\n    if (bounds) {\r\n      setIsLoading(true);\r\n\r\n      getWeatherData(coords.lat, coords.lng).then((data) =>\r\n        setWeatherData(data)\r\n      );\r\n\r\n      getPlacesData(type, bounds.sw, bounds.ne).then((data) => {\r\n        setPlaces(data.filter((place) => place.name && place.num_reviews > 0));\r\n        setFilteredPlaces([]);\r\n        setRating(\"\");\r\n        setIsLoading(false);\r\n      });\r\n    }\r\n  }, [bounds, type]);\r\n\r\n  const onLoad = (autoC) => setAutocomplete(autoC);\r\n\r\n  const onPlaceChanged = () => {\r\n    const lat = autocomplete.getPlace().geometry.location.lat();\r\n    const lng = autocomplete.getPlace().geometry.location.lng();\r\n\r\n    setCoords({ lat, lng });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Header onPlaceChanged={onPlaceChanged} onLoad={onLoad} />\r\n      <Grid container spacing={3} style={{ width: \"100%\" }}>\r\n        <Grid item xs={12} md={4}>\r\n          <List\r\n            isLoading={isLoading}\r\n            childClicked={childClicked}\r\n            places={filteredPlaces.length ? filteredPlaces : places}\r\n            type={type}\r\n            setType={setType}\r\n            rating={rating}\r\n            setRating={setRating}\r\n          />\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={8}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Map\r\n            setChildClicked={setChildClicked}\r\n            setBounds={setBounds}\r\n            setCoords={setCoords}\r\n            coords={coords}\r\n            places={filteredPlaces.length ? filteredPlaces : places}\r\n            weatherData={weatherData}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}